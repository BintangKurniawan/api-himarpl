generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model PostTag {
  id            String          @id @default(cuid())
  title         String          @unique
  slug          String          @unique
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
  parentId      String?         @map("parent_id")
  PostToPostTag PostToPostTag[]
  parent        PostTag?        @relation("ParentChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children      PostTag[]       @relation("ParentChildren")

  @@map("post_tags")
}

model Post {
  id            String          @id @default(cuid())
  authorId      String          @map("author_id")
  title         String
  metaTitle     String          @map("meta_title")
  slug          String
  content       String
  rawHtml       String
  image         String?
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
  publishedAt   DateTime?       @map("published_at")
  PostToPostTag PostToPostTag[]
  author        User            @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([authorId, slug])
  @@map("posts")
}

model Program {
  id           String     @id @default(cuid())
  content      String
  departmentId String     @map("department_id")
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@map("programs")
}

model Position {
  id           String      @id @default(cuid())
  name         String
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at")
  departmentId String?     @map("department_id")
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  users        User[]      @relation("PositionToUser")

  @@map("positions")
}

model Department {
  id          String     @id @default(cuid())
  name        String
  acronym     String
  image       String?
  description String?
  type        String     @default("BE")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at")
  periodYear  Int        @map("period_year")
  period      Period     @relation(fields: [periodYear], references: [year], onDelete: Cascade)
  Position    Position[]
  programs    Program[]
  users       User[]     @relation("DepartmentToUser")

  @@unique([type, acronym])
  @@map("departments")
}

model Period {
  id          String       @id @default(cuid())
  logo        String
  name        String       @unique
  description String?
  year        Int          @unique
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  departments Department[]
  users       User[]       @relation("PeriodToUser")

  @@map("periods")
}

model SocialMedia {
  userId   String @map("user_id")
  name     String
  username String
  url      String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name, username])
  @@map("social_medias")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  username      String?       @unique
  bio           String?
  role          String        @default("member")
  lastLoginAt   DateTime?     @map("last_login_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  socialMedias  SocialMedia[]
  departments   Department[]  @relation("DepartmentToUser")
  periods       Period[]      @relation("PeriodToUser")
  positions     Position[]    @relation("PositionToUser")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PostToPostTag {
  A         String
  B         String
  post_tags PostTag @relation(fields: [B], references: [id], onDelete: Cascade)
  posts     Post    @relation(fields: [A], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_PostToPostTag_AB_unique")
  @@index([B], map: "_PostToPostTag_B_index")
  @@map("_PostToPostTag")
}
